# ============================
# 1. Import Necessary Libraries
# ============================
import pandas as pd
import numpy as np
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt
from IPython.display import display, Markdown, clear_output
import ipywidgets as widgets
import pprint

# ============================
# 2. Configuration Dictionary
# ============================
# Configuration for Risk Score Calculation
config = {
    'weights': {
        'source_ip': 10,
        'device_id': 15,
        'user_agent': 10,
        'login_hour': 10,
        'authentication_type': 10,
        'authentication_result': 10,
        'location': 15,
        'application': 10,
        'carrier_name': 10
    },
    'thresholds': {
        'low_risk': [0, 20],
        'moderate_risk': [21, 50],
        'high_risk': [51, 85],
        'critical_risk': [86, 100]
    },
    'risk_level_recommendations': {
        'Low Risk': {
            'conclusion': "The authentication event appears legitimate based on historical data.",
            'recommendation': "No immediate action is required. Continue monitoring the user's activities."
        },
        'Moderate Risk': {
            'conclusion': "The authentication event is somewhat unusual compared to historical patterns.",
            'recommendation': "Consider reviewing the event for potential anomalies."
        },
        'High Risk': {
            'conclusion': "The authentication event contains unique indicators with no historical confirmation of user legitimacy.",
            'recommendation': "Reset the user's password and MFA tokens to prevent unauthorized access."
        },
        'Critical Risk': {
            'conclusion': "The authentication event poses a significant security threat.",
            'recommendation': "Reset the user's password and MFA tokens, investigate the event promptly, and escalate to the Incident Response (IR) team."
        }
    }
}

# ============================
# 3. Data Loading Function
# ============================
def load_data(csv_file_path):
    """
    Loads SIEM logs from a CSV file into a pandas DataFrame.
    """
    try:
        df = pd.read_csv(csv_file_path)
        display(Markdown(f"**Data Loaded Successfully:** {len(df)} records found."))
        return df
    except FileNotFoundError:
        display(Markdown("**Error:** The specified CSV file was not found. Please check the file path."))
    except pd.errors.EmptyDataError:
        display(Markdown("**Error:** The CSV file is empty. Please provide a valid file."))
    except Exception as e:
        display(Markdown(f"**Error:** An unexpected error occurred: {e}"))

# ============================
# 4. Alert Event Input Widgets
# ============================
# Define alert event input fields
alert_fields = [
    ('timestamp', 'Timestamp:', widgets.Text(value='', description='', placeholder='YYYY-MM-DD HH:MM:SS')),
    ('user_id', 'User ID:', widgets.Text(value='', description='')),
    ('alternate_user_id', 'Alternate User ID:', widgets.Text(value='', description='')),
    ('source_ip', 'Source IP:', widgets.Text(value='', description='')),
    ('device_id', 'Device ID:', widgets.Text(value='', description='')),
    ('user_agent', 'User Agent:', widgets.Text(value='', description='')),
    ('authentication_type', 'Authentication Type:', widgets.Text(value='', description='')),
    ('authentication_result', 'Authentication Result:', widgets.Text(value='', description='')),
    ('country', 'Country:', widgets.Text(value='', description='')),
    ('state', 'State:', widgets.Text(value='', description='')),
    ('application', 'Application:', widgets.Text(value='', description='')),
    ('carrier_name', 'Carrier Name:', widgets.Text(value='', description=''))
]

# Create widgets for alert event input
alert_widgets = []
alert_box = widgets.VBox()

for field_name, description, widget in alert_fields:
    h_box = widgets.HBox([widgets.Label(value=description, layout=widgets.Layout(width='200px')), widget])
    alert_widgets.append((field_name, widget))
    alert_box.children += (h_box,)

display(alert_box)

# ============================
# 5. Risk Score Calculation and Analysis Functions
# ============================
def display_analysis_results(alert_event, detailed_findings, total_events, risk_percentage, risk_level, conclusion, recommendation):
    thresholds = config['thresholds']
    user_ids = alert_event['user_ids']
    user_ids_display = ', '.join(user_ids) if len(user_ids) > 1 else user_ids[0]
    
    # Display Risk Assessment Summary
    display(Markdown("\n**Detailed Analysis of Alert Event Compared to User's Historical Data:**\n"))
    display(Markdown(f"**Total number of historical logins for user(s) '{user_ids_display}': {total_events}**\n"))
    display(Markdown("**Characteristic Analysis:**"))
    
    for characteristic, data in detailed_findings.items():
        status = 'Yes' if data['used_before'] else 'No'
        usage_info = f"Used {int(data['usage_count'])} times ({data['usage_percentage']:.2f}% of logins)"
        weight_info = f"Weight: {data['weight']}%"
        display(Markdown(f"- **{characteristic.replace('_', ' ').title()}** ({weight_info})\n  - **Seen Before:** {status}\n  - **{usage_info}**\n"))
    
    # Output the risk score and thresholds
    display(Markdown(f"**Total Risk Score:** {risk_percentage:.2f}% (on a scale from 0 to 100%)"))
    display(Markdown(f"**Risk Level:** {risk_level}\n"))
    display(Markdown("**Risk Thresholds:**"))
    for level, (lower, upper) in thresholds.items():
        display(Markdown(f"- **{level.replace('_', ' ').title()}:** {lower}% - {upper}% Risk"))
    
    # Output the Conclusion
    display(Markdown(f"\n**Conclusion:** {conclusion}"))
    
    # Output the Recommendation
    display(Markdown(f"**Recommendation:** {recommendation}"))

def perform_analysis(df, user_ids, alert_event):
    # Filter historical data for the given user_ids
    user_data = df[df['User ID'].str.lower().isin([uid.lower() for uid in user_ids])]
    total_events = len(user_data)
    
    # Initialize detailed findings
    detailed_findings = {}
    
    # Iterate over each characteristic
    for characteristic, weight in config['weights'].items():
        current_value = alert_event.get(characteristic, '').lower()
        if characteristic == 'login_hour':
            # Handle login_hour as numeric
            try:
                current_value_num = int(alert_event.get(characteristic, 0))
            except ValueError:
                current_value_num = 0
            used_before = user_data['Login Hour'].astype(int).eq(current_value_num).any()
            usage_count = user_data['Login Hour'].astype(int).eq(current_value_num).sum()
            usage_percentage = (usage_count / total_events * 100) if total_events > 0 else 0
        else:
            used_before = user_data[characteristic].str.lower().str.contains(current_value).any()
            usage_count = user_data[characteristic].str.lower().str.contains(current_value).sum()
            usage_percentage = (usage_count / total_events * 100) if total_events > 0 else 0
        detailed_findings[characteristic] = {
            'used_before': used_before,
            'usage_count': usage_count,
            'usage_percentage': usage_percentage,
            'weight': weight
        }
    
    # Calculate total risk score
    risk_score_components = {}
    for characteristic, data in detailed_findings.items():
        contribution = data['weight'] * (1 - data['usage_percentage'] / 100)
        risk_score_components[characteristic] = contribution
    
    total_risk_score = sum(risk_score_components.values())
    max_possible_score = sum(weight for weight in config['weights'].values())
    risk_percentage = (total_risk_score / max_possible_score) * 100 if max_possible_score > 0 else 0
    
    # Determine risk level
    thresholds = config['thresholds']
    if risk_percentage <= thresholds['low_risk'][1]:
        risk_level = 'Low Risk'
    elif risk_percentage <= thresholds['moderate_risk'][1]:
        risk_level = 'Moderate Risk'
    elif risk_percentage <= thresholds['high_risk'][1]:
        risk_level = 'High Risk'
    else:
        risk_level = 'Critical Risk'
    
    # Extract conclusion and recommendation
    risk_recommendation = config['risk_level_recommendations'][risk_level]
    conclusion = risk_recommendation['conclusion']
    recommendation = risk_recommendation['recommendation']
    
    # Prepare alert_event_mapped for display
    alert_event_mapped = {
        'user_ids': user_ids
    }
    
    # Display findings
    display_analysis_results(alert_event_mapped, detailed_findings, total_events, risk_percentage, risk_level, conclusion, recommendation)
    
    # Proceed with anomaly detection, visualization, etc.
    perform_anomaly_detection(user_data, alert_event)
    visualize_data(user_data, alert_event)
    export_to_excel(detailed_findings, risk_percentage, risk_level, conclusion, recommendation)

# ============================
# 6. Anomaly Detection Function
# ============================
def perform_anomaly_detection(user_history, alert_event):
    """
    Identifies anomalies in the alert event based on historical user data.
    """
    display(Markdown("\n**Anomaly Detection:**\n"))
    
    # Example: Detect if login hour is unusual using Z-Score Analysis
    if 'login_hour' in config['weights']:
        if len(user_history) > 1:
            try:
                z_scores = np.abs(stats.zscore(user_history['Login Hour'].astype(int)))
                anomalies = user_history['Login Hour'][z_scores > 2]
                if not anomalies.empty:
                    display(Markdown("**Anomalous Login Hours Detected:**"))
                    display(anomalies.describe())
                else:
                    display(Markdown("**No anomalous login hours detected.**"))
            except Exception as e:
                display(Markdown(f"**Error in anomaly detection:** {e}"))
        else:
            display(Markdown("**Not enough data to perform anomaly detection on Login Hour.**"))

# ============================
# 7. Visualization Function
# ============================
def visualize_data(user_history, alert_event):
    """
    Generates visual representations of authentication patterns.
    """
    display(Markdown("\n**Visualization:**\n"))
    
    # Login Hour Histogram with Alert Event Hour Highlighted
    if 'login_hour' in config['weights']:
        try:
            plt.figure(figsize=(12, 6))
            sns.histplot(user_history['Login Hour'].astype(int), bins=24, kde=False, color='skyblue', edgecolor='black')
            alert_hour_str = alert_event.get('timestamp', '00:00:00').split(' ')[1].split(':')[0]
            alert_hour = int(alert_hour_str) if alert_hour_str.isdigit() else 0
            plt.axvline(alert_hour, color='red', linestyle='--', linewidth=2, label='Alert Event Hour')
            plt.title("Login Hour Distribution", fontsize=14)
            plt.xlabel('Hour of Day', fontsize=12)
            plt.ylabel('Number of Logins', fontsize=12)
            plt.legend()
            plt.show()
        except Exception as e:
            display(Markdown(f"**Error in visualization:** {e}"))

# ============================
# 8. Export to Excel Function
# ============================
def export_to_excel(detailed_findings, risk_percentage, risk_level, conclusion, recommendation):
    """
    Exports the analysis results to an Excel file.
    """
    # Prepare data for export
    data = []
    for characteristic, details in detailed_findings.items():
        data.append({
            'Characteristic': characteristic.replace('_', ' ').title(),
            'Used Before': details['used_before'],
            'Usage Count': details['usage_count'],
            'Usage Percentage (%)': round(details['usage_percentage'], 2),
            'Weight (%)': details['weight'],
            'Contribution (%)': round(details['weight'] * (1 - details['usage_percentage'] / 100), 2)
        })
    
    df_export = pd.DataFrame(data)
    df_export['Total Risk Score (%)'] = risk_percentage
    df_export['Risk Level'] = risk_level
    df_export['Conclusion'] = conclusion
    df_export['Recommendation'] = recommendation
    
    # Export to Excel
    output_file = 'authentication_analysis_results.xlsx'
    try:
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            df_export.to_excel(writer, index=False, sheet_name='Risk Assessment')
            # Optionally, add more sheets for detailed logs or visualizations
        display(Markdown(f"\n**Results have been exported to '{output_file}'.**"))
    except Exception as e:
        display(Markdown(f"\n**Error exporting results to Excel:** {e}"))

# ============================
# 9. Function to Execute Analysis
# ============================
def execute_analysis(csv_file_path):
    """
    Executes the entire analysis workflow.
    """
    # Load data
    df = load_data(csv_file_path)
    if df is None:
        return
    
    # Retrieve alert event inputs
    alert_event = {}
    user_ids = []
    for field_name, widget in alert_widgets:
        value = widget.value.strip()
        if field_name == 'user_id' or field_name == 'alternate_user_id':
            if value:
                user_ids.append(value)
        else:
            alert_event[field_name] = value
    
    if not user_ids:
        display(Markdown("**Error:** At least one User ID must be provided."))
        return
    
    alert_event['user_ids'] = user_ids
    
    # Perform analysis
    perform_analysis(df, user_ids, alert_event)

# ============================
# 10. Execute Analysis Button
# ============================
# Create a button to execute the analysis
execute_button = widgets.Button(
    description='Analyze Authentication Event',
    button_style='success', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click to perform analysis',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

def on_button_clicked(b):
    # Clear previous outputs
    clear_output(wait=True)
    
    # Redisplay the alert input widgets
    display(alert_box)
    
    # Execute the analysis
    csv_file_path = input_csv.value.strip()
    if not csv_file_path:
        display(Markdown("**Error:** Please provide the path to the SIEM logs CSV file."))
        return
    execute_analysis(csv_file_path)

# Create input for CSV file path
input_csv = widgets.Text(
    value='',
    placeholder='Enter path to SIEM logs CSV file',
    description='CSV File Path:',
    disabled=False
)

# Display the CSV input and button
display(input_csv)
display(execute_button)

# Assign the button click event
execute_button.on_click(on_button_clicked)
