import pandas as pd

# Load your SIEM logs into a DataFrame
csv_file_path = input("Please enter the path to the CSV file: ")
df = pd.read_csv(csv_file_path)

# Ensure the 'timestamp' column is in datetime format
df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
df.dropna(subset=['timestamp'], inplace=True)

# Print the available columns
print("Available columns in the DataFrame:")
print(df.columns.tolist())

# Map SIEM columns to analysis fields
df.rename(columns={
    'udm.principal.ip': 'source_ip',
    'udm.network.http.user_agent': 'user_agent',
    'udm.metadata.product_name': 'authentication_type',
    'udm.security_result.action': 'authentication_result',
    'udm.principal.user.userid': 'user_id',  # Use the correct column for user ID
    'udm.principal.asset_id': 'device_id',
    'udm.principal.ip_geo_artifact.location.country_or_region': 'country',
    'udm.principal.ip_geo_artifact.location.state': 'state',
    # Add other mappings as necessary
}, inplace=True)

# Handle missing data
df['user_id'] = df['user_id'].astype(str).str.strip().str.lower()
df.dropna(subset=['user_id'], inplace=True)
df['authentication_result'].fillna('unknown', inplace=True)
df['source_ip'].fillna('unknown', inplace=True)
df['user_agent'].fillna('unknown', inplace=True)
df['authentication_type'].fillna('unknown', inplace=True)
df['device_id'].fillna('unknown', inplace=True)
df['country'].fillna('unknown', inplace=True)
df['state'].fillna('unknown', inplace=True)

# Replace the example values with the actual alert event details
# Make sure to use actual values from your SIEM data
alert_event = {
    'timestamp': pd.to_datetime('2023-10-12 14:30:00'),
    'user_id': 'user123',  # Replace with the actual user ID from the alert
    'source_ip': '203.0.113.45',  # Replace with the actual source IP from the alert
    'device_id': 'device456',  # Replace with the actual device ID from the alert
    'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',  # Replace with the actual user agent
    'authentication_type': 'VPN Login',  # Replace with the actual authentication type
    'authentication_result': 'success',  # Replace with the actual result
    'country': 'United States',  # Replace with the actual country
    'state': 'California',  # Replace with the actual state
    # Include other relevant fields as needed
}

# Normalize the user_id in alert_event
alert_event['user_id'] = alert_event['user_id'].strip().lower()

alert_df = pd.DataFrame([alert_event])

# Verify that the user exists in the data
unique_user_ids = df['user_id'].unique()
print(f"Total unique user IDs in data: {len(unique_user_ids)}")
user_exists = alert_event['user_id'] in unique_user_ids
print(f"Is the alert event user ID in data: {user_exists}")

# Filter the DataFrame to include only the user's data
user_history = df[df['user_id'] == alert_event['user_id']]
print(f"Total records for user '{alert_event['user_id']}': {len(user_history)}")

# Total number of events in user history
total_events = len(user_history)

# Prepare a dictionary to store detailed findings
detailed_findings = {}

# Define a function to calculate usage counts and percentages
def calculate_usage_count_and_percentage(user_history_field, alert_value):
    if total_events > 0:
        counts = user_history_field.value_counts()
        usage_count = counts.get(alert_value, 0)
        usage_percentage = (usage_count / total_events) * 100
        used_before = usage_count > 0
    else:
        usage_count = 0
        usage_percentage = 0.0
        used_before = False
    return used_before, usage_count, usage_percentage

# Source IP Address Analysis
ip_used_before, source_ip_usage_count, source_ip_usage_percentage = calculate_usage_count_and_percentage(user_history['source_ip'], alert_event['source_ip'])
detailed_findings['Source IP Address'] = {
    'used_before': ip_used_before,
    'usage_count': source_ip_usage_count,
    'usage_percentage': source_ip_usage_percentage
}

# Device ID Analysis
device_used_before, device_id_usage_count, device_id_usage_percentage = calculate_usage_count_and_percentage(user_history['device_id'], alert_event['device_id'])
detailed_findings['Device ID'] = {
    'used_before': device_used_before,
    'usage_count': device_id_usage_count,
    'usage_percentage': device_id_usage_percentage
}

# User Agent Analysis
user_agent_used_before, user_agent_usage_count, user_agent_usage_percentage = calculate_usage_count_and_percentage(user_history['user_agent'], alert_event['user_agent'])
detailed_findings['User Agent'] = {
    'used_before': user_agent_used_before,
    'usage_count': user_agent_usage_count,
    'usage_percentage': user_agent_usage_percentage
}

# Time of Day Analysis
alert_hour = alert_event['timestamp'].hour
if total_events > 0:
    user_history['hour'] = user_history['timestamp'].dt.hour
    hour_used_before, hour_usage_count, hour_usage_percentage = calculate_usage_count_and_percentage(user_history['hour'], alert_hour)
else:
    hour_used_before = False
    hour_usage_count = 0
    hour_usage_percentage = 0.0
detailed_findings['Login Hour'] = {
    'used_before': hour_used_before,
    'usage_count': hour_usage_count,
    'usage_percentage': hour_usage_percentage
}

# Authentication Type Analysis
auth_type_used_before, auth_type_usage_count, auth_type_usage_percentage = calculate_usage_count_and_percentage(user_history['authentication_type'], alert_event['authentication_type'])
detailed_findings['Authentication Type'] = {
    'used_before': auth_type_used_before,
    'usage_count': auth_type_usage_count,
    'usage_percentage': auth_type_usage_percentage
}

# Location Analysis (Country and State)
if total_events > 0:
    location_matches = user_history[
        (user_history['country'] == alert_event['country']) &
        (user_history['state'] == alert_event['state'])
    ]
    location_usage_count = len(location_matches)
    location_usage_percentage = (location_usage_count / total_events) * 100
    location_used_before = location_usage_count > 0
else:
    location_used_before = False
    location_usage_count = 0
    location_usage_percentage = 0.0
detailed_findings['Location'] = {
    'used_before': location_used_before,
    'usage_count': location_usage_count,
    'usage_percentage': location_usage_percentage
}

# Summarize and Output the Detailed Findings
print("\nDetailed Analysis of Alert Event Compared to User's Historical Data:\n")
for characteristic, data in detailed_findings.items():
    status = 'Yes' if data['used_before'] else 'No'
    usage_info = f"Used {data['usage_count']} times ({data['usage_percentage']:.2f}% of logins)"
    print(f"{characteristic}:\n - Seen Before: {status}\n - {usage_info}\n")

# Determine the level of deviation
unseen_characteristics = sum(not data['used_before'] for data in detailed_findings.values())

if unseen_characteristics == 0:
    conclusion = "The alert event matches the user's historical behavior."
elif unseen_characteristics <= 2:
    conclusion = "The alert event has some new characteristics but is largely consistent with past behavior."
else:
    conclusion = "The alert event significantly deviates from the user's historical behavior and may be suspicious."

print(f"Conclusion: {conclusion}")
